(function(){function a(a){h.push(a),a.preventDefault&&a.preventDefault()}function b(a){return a&&a.stack&&a.stack.replace(d,"")||""}function c(){return"function"!=typeof require&&i<e?(setTimeout(c,100),void i++):void require(["background/page-trackers"],c=>{function d(a){try{const c=new Date().toLocaleString(),{detail:d,reason:f=d&&d.reason||""}=a,g=b(a.error)||b(f);if("unhandledrejection"==a.type){const a=`Caught unhandled promise rejection at ${c}:\n${g}`;console.error(a),e.exception(a,!0)}else a.preventDefault&&(console.error(`Caught unhandled exception at ${c}:\n${g}`),e.exception(error,!0),a.preventDefault())}catch(a){console.error("Unhandled error in the error handler (oh, the irony!)",a)}}const e=c[g]||c.background;h.forEach(d),h=null,window.removeEventListener("error",a),window.removeEventListener("unhandledrejection",a),window.addEventListener("error",d),window.addEventListener("unhandledrejection",d)})}const d=/chrome-extension:\/\/[^\n]+\//g,e=20,f=location.pathname.match(/\/(\w+)\.html/),g=f&&f[1]||"background";let h=[],i=0;window.addEventListener("error",a),window.addEventListener("unhandledrejection",a),"background"==g?setTimeout(c,3e3):c()})();
